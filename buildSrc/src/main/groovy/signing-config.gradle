plugins {
	id "signing"
}

var signingKey = resolveSigningKey()
var signingPassword = findSigningProperty( "signingPassword" )

signing {
	useInMemoryPgpKeys( signingKey, signingPassword )

	sign publishing.publications.publishedArtifacts
}

String resolveSigningKey() {
	var key = findSigningProperty( "signingKey" )
	if ( key != null ) {
		return key
	}

	var keyFile = findSigningProperty( "signingKeyFile" )
	if ( keyFile != null ) {
		return new File( keyFile ).text
	}

	return null
}

String findSigningProperty(String propName) {
	if ( System.getProperty( propName ) != null ) {
		logger.lifecycle "Found signing property `{}` as a system property", propName
		return System.getProperty(propName )
	}
	else if ( System.getenv().get( propName ) != null ) {
		logger.lifecycle "Found signing property `{}` as an env-var property", propName
		return System.getenv().get( propName )
	}
	else if ( project.hasProperty( propName ) ) {
		logger.lifecycle "Found signing property `{}` as a project property", propName
		return project.hasProperty( propName )
	}
	else {
		logger.lifecycle "Did not find signing property `{}`", propName
		return null
	}
}


var signingTask = project.tasks.named( "signPublishedArtifactsPublication" ) {
	doFirst {
		if ( signingKey == null || signingPassword == null ) {
			throw new GradleException(
					"Cannot perform signing without GPG details.  Please set the `signingKey` and `signingKeyFile` properties"
			)
		}
	}
}

var signingExtension = project.getExtensions().getByType(SigningExtension) as SigningExtension

tasks.register( "sign" ) {
	dependsOn "signPublications"
}

tasks.register( "signPublications" ) { t ->
	tasks.withType( Sign ).configureEach { s ->
		t.dependsOn s
	}
}


boolean wasSigningExplicitlyRequested() {
	// check whether signing task was explicitly requested when running the build
	//
	// NOTE: due to https://discuss.gradle.org/t/how-to-tell-if-a-task-was-explicitly-asked-for-on-the-command-line/42853/3
	// we cannot definitively know whether the task was requested.  Gradle really just does not expose this information.
	// so we make a convention - we check the "start parameters" object to see which task-names were requested;
	// the problem is that these are the raw names directly from the command line.  e.g. it is perfectly legal to
	// say `gradlew signPubArtPub` in place of `gradlew signPublishedArtifactsPublication` - Gradle will simply
	// "expand" the name it finds.  However, it does not make that available.
	//
	// so the convention is that we will check for the following task names
	//
	// for each of:
	//		1. `sign`
	//		2. `signPublications`
	//		3. `signPublishedArtifactsPublication`
	//
	// and we check both forms:
	//		1. "${taskName}"
	//		2. project.path + ":${taskName}"
	//
	// we need to check both again because of the "start parameters" discussion

	def signingTaskNames = ["sign", "signPublications", "signPublishedArtifactsPublication"]

	for ( String taskName : signingTaskNames ) {
		if ( gradle.startParameter.taskNames.contains( taskName )
				|| gradle.startParameter.taskNames.contains( "${project.path}:${taskName}" ) ) {
			return true
		}
	}

	return false
}

if ( wasSigningExplicitlyRequested() ) {
	// signing was explicitly requested
	signingExtension.required = true
}
else {
	gradle.taskGraph.whenReady { graph ->
		if ( graph.hasTask( signingTask.get() ) ) {
			// signing is scheduled to happen.
			//
			// we know, from above if-check, that it was not explicitly requested -
			// so it is triggered via task dependency. make sure we want it to happen
//			var publishingTask = project.tasks.getByName( "publishPublishedArtifactsPublicationToSonatypeRepository" ) as PublishToMavenRepository
//			if ( graph.hasTask( publishingTask ) ) {
			if ( graph.hasTask( "publishPublishedArtifactsPublicationToSonatypeRepository" ) ) {
				// we are publishing to Sonatype OSSRH - we need the signing to happen
				signingExtension.required = true
			}
			else {
				// signing was not explicitly requested and we are not publishing to OSSRH,
				// so do not sign.
				signingTask.get().enabled = false
			}
		}

	}
}
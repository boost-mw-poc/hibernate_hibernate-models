// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release processing
//
// Processes should execute the following tasks in order
//		- prepareForRelease 				(this script)
//		- publishToSonatype					(io.github.gradle-nexus.publish-plugin)
//		- closeSonatypeStagingRepository	(io.github.gradle-nexus.publish-plugin)
//		- completeRelease 					(this script)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release processing - preparation
//		- clean
//		- change version in `/version.txt` to the release version
//		- commit the version change
//
// Processes should execute `prepareForRelease`
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def releasePreparationTask = tasks.register( "releasePreparation" ) {
	dependsOn tasks.named( "clean" )

	doLast {
		logger.lifecycle( "Checking that all commits are pushed..." )
		String diffWithUpstream = executeGitCommand( 'diff', '@{u}' )
		if ( !diffWithUpstream.isEmpty() ) {
			throw new GradleException(
					"Cannot perform `ciRelease` tasks because there are un-pushed local commits .\n" +
							"Push your commits first."
			);
		}
	}
}

def changeToReleaseVersionTask = tasks.register( "changeToReleaseVersion" ) {
	group 'Release'
	description 'Updates `version.txt` file to the specified release-version'

	dependsOn releasePreparationTask

	doFirst {
		logger.lifecycle( "Updating version-file to release-version : `${releaseVersion}`" )
		updateVersionFile( project.ext.releaseVersion )
	}
}

def gitPreparationForReleaseTask = tasks.register( 'gitPreparationForRelease' ) {
	dependsOn changeToReleaseVersionTask

	doLast {
		logger.lifecycle( "Performing pre-steps Git commit : `${project.ext.releaseVersion}`" )
		executeGitCommand( 'add', '.' )
		executeGitCommand( 'commit', '-m', "Pre-steps for release : `${project.ext.releaseVersion}`" )
	}
}

tasks.register( "prepareForRelease" ) {
	dependsOn releasePreparationTask
	dependsOn changeToReleaseVersionTask
	dependsOn gitPreparationForReleaseTask
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Publish
//
// Processes should execute
// 		- `publishToSonatype`
// 		- `closeSonatypeStagingRepository`
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release processing - complete
//		- change version in `/version.txt` to the dev version
//		- commit
//		- tag
//
// Processes should execute `completeRelease`
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def changeToDevelopmentVersionTask = tasks.register( 'changeToDevelopmentVersion' ) {
	group 'Release'
	description 'Updates `version.txt` file to the specified development-version'

	doFirst {
		logger.lifecycle( "Updating version-file to development-version : `${project.ext.developmentVersion}`" )
		updateVersionFile( project.ext.developmentVersion )
	}
}

def releasePreparePostGitTask = tasks.register( 'gitTasksAfterRelease' ) {
	dependsOn changeToDevelopmentVersionTask

	doLast {
		def releaseTag = determineReleaseTag(releaseVersion)
		logger.lifecycle( "Performing pre-steps Git commit : `${releaseVersion}`" )
		executeGitCommand( 'add', '.' )
		executeGitCommand( 'commit', '-m', "Post-steps for release : `${releaseVersion}`" )

		if ( project.createTag ) {
			logger.lifecycle( "Tagging release : `${releaseTag}`..." )
			executeGitCommand( 'tag', '-a', releaseTag, '-m', "Release ${releaseVersion}" )
		}
	}
}

tasks.register( "completeRelease" ) {
	dependsOn changeToDevelopmentVersionTask
	dependsOn releasePreparePostGitTask
}


void updateVersionFile(String version) {
	logger.lifecycle( "Updating `version.txt` version to `${version}`" )
	project.ext.versionFile.text = "${version}"
}

static String determineReleaseTag(String releaseVersion) {
	return releaseVersion.endsWith( '.Final' )
			? releaseVersion.replace( ".Final", "" )
			: releaseVersion;
}
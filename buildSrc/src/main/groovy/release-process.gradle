
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release processing
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def releasePreparationTask = tasks.register( "releasePreparation" ) {
	dependsOn tasks.named( "clean" )

	doLast {
		logger.lifecycle( "Checking that all commits are pushed..." )
		String diffWithUpstream = executeGitCommand( 'diff', '@{u}' )
		if ( !diffWithUpstream.isEmpty() ) {
			throw new GradleException(
					"Cannot perform `ciRelease` tasks because there are un-pushed local commits .\n" +
							"Push your commits first."
			);
		}
	}
}

def changeToReleaseVersionTask = tasks.register( "changeToReleaseVersion" ) {
	group 'Release'
	description 'Updates `version.txt` file to the specified release-version'

	dependsOn releasePreparationTask

	doFirst {
		logger.lifecycle( "Updating version-file to release-version : `${releaseVersion}`" )
		updateVersionFile( project.ext.releaseVersion )
	}
}

def gitPreparationForReleaseTask = tasks.register( 'gitPreparationForRelease' ) {
	dependsOn changeToReleaseVersionTask

	doLast {
		logger.lifecycle( "Performing pre-steps Git commit : `${project.ext.releaseVersion}`" )
		executeGitCommand( 'add', '.' )
		executeGitCommand( 'commit', '-m', "Pre-steps for release : `${project.ext.releaseVersion}`" )
	}
}

def changeToDevelopmentVersionTask = tasks.register( 'changeToDevelopmentVersion' ) {
	group 'Release'
	description 'Updates `version.txt` file to the specified development-version'

	dependsOn tasks.named( "publishAllPublicationsToSonatypeRepository" )

	doFirst {
		logger.lifecycle( "Updating version-file to development-version : `${project.ext.developmentVersion}`" )
		updateVersionFile( project.ext.developmentVersion )
	}
}

def releasePreparePostGitTask = tasks.register( 'gitTasksAfterRelease' ) {
	dependsOn changeToDevelopmentVersionTask

	doLast {
		def releaseTag = determineReleaseTag(releaseVersion)
		logger.lifecycle( "Performing pre-steps Git commit : `${releaseVersion}`" )
		executeGitCommand( 'add', '.' )
		executeGitCommand( 'commit', '-m', "Post-steps for release : `${releaseVersion}`" )

		if ( project.createTag ) {
			logger.lifecycle( "Tagging release : `${releaseTag}`..." )
			executeGitCommand( 'tag', '-a', releaseTag, '-m', "Release ${releaseVersion}" )
		}
	}
}

tasks.named( "publishAllPublicationsToSonatypeRepository" ) {
	dependsOn changeToReleaseVersionTask
}

def doReleaseTask = tasks.register( "doRelease" ) {
	dependsOn releasePreparationTask
	dependsOn gitPreparationForReleaseTask
	dependsOn changeToReleaseVersionTask
	dependsOn tasks.named( "publishAllPublicationsToSonatypeRepository" )
	dependsOn changeToDevelopmentVersionTask
	dependsOn releasePreparePostGitTask
	dependsOn tasks.named( "closeSonatypeStagingRepository" )
}

void updateVersionFile(String version) {
	logger.lifecycle( "Updating `version.txt` version to `${version}`" )
	project.ext.versionFile.text = "${version}"
}

static String determineReleaseTag(String releaseVersion) {
	return releaseVersion.endsWith( '.Final' )
			? releaseVersion.replace( ".Final", "" )
			: releaseVersion;
}